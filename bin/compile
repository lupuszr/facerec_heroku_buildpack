#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCES_LIST="$BUILD_DIR/sources.list"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR -o dir::etc::sourcelist=$APT_SOURCES_LIST"


topic "Adding trusty-media PPA"
cp /etc/apt/sources.list $APT_SOURCES_LIST
echo "deb http://ppa.launchpad.net/mc3man/trusty-media/ubuntu trusty main" >> $APT_SOURCES_LIST

topic "Cleaning apt caches"
apt-get $APT_OPTIONS clean | indent

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

topic "fetching cmake"
apt-get $APT_OPTIONS -y --force-yes --no-install-recommends -d install --reinstall software-properties-common | indent
add-apt-repository ppa:george-edison55/cmake-3.x
apt-get update
apt-get $APT_OPTIONS -y --force-yes --no-install-recommends -d install --reinstall cmake | indent

topic "Fetching .debs for libx and libpng"
apt-get $APT_OPTIONS -y --force-yes --no-install-recommends -d install --reinstall libx11-dev | indent
apt-get $APT_OPTIONS -y --force-yes --no-install-recommends -d install --reinstall libpng-dev | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt_ffmpeg.sh
export PATH="\$HOME/.apt/opt/cmake/bin:\$PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
EOF

export PATH="$BUILD_DIR/.apt/opt/cmake/bin:$PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

# give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"
